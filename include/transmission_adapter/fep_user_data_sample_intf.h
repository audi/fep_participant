/**
 * Declaration of the Class IUserDataSample.
 *
 * @file

   @copyright
   @verbatim
   Copyright @ 2019 Audi AG. All rights reserved.
   
       This Source Code Form is subject to the terms of the Mozilla
       Public License, v. 2.0. If a copy of the MPL was not distributed
       with this file, You can obtain one at https://mozilla.org/MPL/2.0/.
   
   If it is not possible or desirable to put the notice in a particular file, then
   You may include the notice in a location (such as a LICENSE file in a
   relevant directory) where a recipient would be likely to look for such a notice.
   
   You may add additional accurate notices of copyright ownership.
   @endverbatim
 *
 */

#if !defined(EA_9CBCC59F_5508_435f_BB48_5FBB204FAFD7__INCLUDED_)
#define EA_9CBCC59F_5508_435f_BB48_5FBB204FAFD7__INCLUDED_

#include "fep_types.h"

namespace fep
{
    /**
     * Interface for the user data sample in FEP.
     * Any instance of a user data sample will be initialized with an empty internal memory block.
     * To attach the sample to an external memory block, call \ref Attach(). If you want to use the
     * internal memory block after attaching, call \ref Detach().
     * In the following documentation the term "sample memory block" refers both the internal and the attached
     * external memory block, otherwise the terms "external memory block" or "internal memory block" are
     * used.
     */
    class FEP_PARTICIPANT_EXPORT IUserDataSample
    {

    public:
        /**
         * DTOR
         */
        virtual ~IUserDataSample() = default;

        /**
         * The method \c CopyFrom copies a memory block \a pvData with the size \a szSize
         * into the sample's memory block. If an internal memory block is used and \a szSize does
         * not match the preallocated amount of memory, \a szSize of memory it is re-allocated.
         * @param [in] pvData  Pointer to the source memory block.
         * @param [in] szSize  The amount of data to be copied.
         * @returns  Standard result code.
         * @retval ERR_NOERROR  Everything went fine.
         * @retval ERR_MEMORY   The size is too big for the external memory block or the resize of
         *                      the internal memory block failed
         * @retval ERR_POINTER  If \c pvData is NULL.
         */
        virtual fep::Result CopyFrom(const void* pvData, const size_t szSize) =0;

        /**
         * The method \c CopyTo copies \a szSize bytes of the sample's memory block
         * to a memory block \a pvData.
         * @param [in] pvData  Pointer to the target memory.
         * @param [in] szSize  The amount of data to be copied.
         * @returns  Standard result code.
         * @retval ERR_NOERROR  Everything went fine
         * @retval ERR_POINTER  If \c pvData is NULL.
         * @retval ERR_MEMORY   The size is bigger than the sample's memory block.
         */
        virtual fep::Result CopyTo(void* pvData, const size_t szSize) const =0;

        /**
         * The method \c GetPtr returns a pointer to the user data located inside
         * the sample.
         * 
         * @returns  a pointer to the user data.
         */
        virtual void* GetPtr() const =0;

        /**
         * The method \c Attach() attaches an external memory block to this sample. This sample will
         * not take ownership of that external memory block.
         * The internal memory block will be deleted when calling this method.
         * 
         * @param [in] pvData  A pointer to the external memory block.
         * @param [in] szSize  The size of the external memory block.
         * @returns  Standard result code.
         * @retval ERR_NOERROR  Everything went fine
         */
        virtual fep::Result Attach(void* pvData, size_t const szSize) = 0;

        /**
         * The method \c Detach will detach this sample from a previously attached memory block and use
         * the internal memory block from now on.
         * 
         * @returns  Standard result code.
         * @retval ERR_NOERROR  Everything went fine
         * @retval ERR_MEMORY  No external memory was attached.
         */
        virtual fep::Result Detach() = 0;

        /**
         * The method \c SetSignalHandle sets the handle of the signal this sample represents.
         * 
         * @param [in] hSignalHandle  The signal handle
         * @returns  Standard result code.
         * @retval ERR_NOERROR  Everything went fine
         */
        virtual fep::Result SetSignalHandle(handle_t hSignalHandle) = 0;

        /**
         * The method \c GetSignalHandle returns the handle as generated by \c
         * ITransmissionAdapter::RegisterSignal()
         * @returns  The signal handle.
         */
        virtual handle_t GetSignalHandle() const =0;
        /**
         * The method \c GetSize returns the size of the user data located inside
         * the sample.
         * 
         * @returns  the size of the user data.
         */
        virtual size_t GetSize() const =0;

        /**
         *  The method \c GetCapacity returns the current capacity of the memory block 
         *  inside the sample.
         *  
         *  @returns the size of the internal memory block
         */
        virtual size_t GetCapacity() const =0;

        /**
         * The method \c SetSize resizes the internally held memory block. If the current
         * size differs from \a szDataSize, the current block will be discarded and a new
         * one allocated.
         * @param [in] szDataSize  The new size of the data block in byte.
         * @returns  Standard result code.
         * @retval ERR_NOERROR  Everything went fine
         * @retval ERR_INVALID_FUNCTION  An external memory block is used, we cannot manipulate its size
         */
        virtual fep::Result SetSize(const size_t szDataSize) =0;

        /**
        * \c SetTime sets the timestamp this sample is associated with.
        * @param [in] tmSample The new timestamp (see \ref ITiming::GetTime)
        * @retval ERR_NOERROR Everything went fine
        */
        virtual fep::Result SetTime(timestamp_t tmSample) = 0;

        /**
        * \c GetTime returns the timestamp this sample is associated with.
        * @retval The timestamp
        */
        virtual timestamp_t GetTime() const = 0;
    };
} // namespace fep

#endif // !defined(EA_9CBCC59F_5508_435f_BB48_5FBB204FAFD7__INCLUDED_)
